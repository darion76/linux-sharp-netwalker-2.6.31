--- linux-2.6.31-ER1-efikamx.orig/arch/arm/mm/fault.c	2009-09-09 17:13:59.000000000 -0500
+++ linux-2.6.31-ER1-efikamx/arch/arm/mm/fault.c	2010-01-24 16:14:15.000000000 -0600
@@ -23,6 +23,20 @@
 
 #include "fault.h"
 
+/*
+ * Fault status register encodings.  We steal bit 31 for our own purposes.
+ */
+#define FSR_LNX_PF              (1 << 31)
+#define FSR_WRITE               (1 << 11)
+#define FSR_FS4                 (1 << 10)
+#define FSR_FS3_0               (15)
+
+static inline int fsr_fs(unsigned int fsr)
+{
+        return (fsr & FSR_FS3_0) | (fsr & FSR_FS4) >> 6;
+}
+
+#ifdef CONFIG_MMU
 
 #ifdef CONFIG_KPROBES
 static inline int notify_page_fault(struct pt_regs *regs, unsigned int fsr)
@@ -97,6 +111,10 @@
 
 	printk("\n");
 }
+#else                                   /* CONFIG_MMU */
+void show_pte(struct mm_struct *mm, unsigned long addr)
+{ }
+#endif                                  /* CONFIG_MMU */
 
 /*
  * Oops.  The kernel tried to access some page that wasn't present.
@@ -481,9 +499,58 @@
 	arm_notify_die("", regs, &info, fsr, 0);
 }
 
+static struct fsr_info ifsr_info[] = {
+	{ do_bad,				SIGBUS,  0,				"unknown 0"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 1"			   },
+	{ do_bad,				SIGBUS,  0,				"debug event"			   },
+	{ do_bad,				SIGSEGV, SEGV_ACCERR,	"section access flag fault"	   },
+	{ do_bad,				SIGBUS,  0,				"unknown 4"			   },
+	{ do_translation_fault,	SIGSEGV, SEGV_MAPERR,	"section translation fault"	   },
+	{ do_bad,				SIGSEGV, SEGV_ACCERR,	"page access flag fault"	   },
+	{ do_page_fault,		SIGSEGV, SEGV_MAPERR,	"page translation fault"	   },
+	{ do_bad,				SIGBUS,	 0,				"external abort on non-linefetch"  },
+	{ do_bad,				SIGSEGV, SEGV_ACCERR,	"section domain fault"		   },
+	{ do_bad,				SIGBUS,  0,				"unknown 10"			   },
+	{ do_bad,				SIGSEGV, SEGV_ACCERR,	"page domain fault"		   },
+	{ do_bad,				SIGBUS,	 0,				"external abort on translation"	   },
+	{ do_sect_fault,		SIGSEGV, SEGV_ACCERR,	"section permission fault"	   },
+	{ do_bad,				SIGBUS,	 0,				"external abort on translation"	   },
+	{ do_page_fault,		SIGSEGV, SEGV_ACCERR,	"page permission fault"		   },
+	{ do_bad,				SIGBUS,  0,				"unknown 16"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 17"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 18"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 19"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 20"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 21"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 22"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 23"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 24"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 25"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 26"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 27"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 28"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 29"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 30"			   },
+	{ do_bad,				SIGBUS,  0,				"unknown 31"			   },
+};
+
+
 asmlinkage void __exception
 do_PrefetchAbort(unsigned long addr, struct pt_regs *regs)
 {
-	do_translation_fault(addr, 0, regs);
+	const struct fsr_info *inf = ifsr_info + fsr_fs(ifsr);
+	struct siginfo info;
+
+	if (!inf->fn(addr, ifsr | FSR_LNX_PF, regs))
+		return;
+
+	printk(KERN_ALERT "Unhandled prefetch abort: %s (0x%03x) at 0x%08lx\n",
+		inf->name, ifsr, addr);
+
+	info.si_signo = inf->sig;
+	info.si_errno = 0;
+	info.si_code  = inf->code;
+	info.si_addr  = (void __user *)addr;
+	arm_notify_die("", regs, &info, ifsr, 0);
 }
 
